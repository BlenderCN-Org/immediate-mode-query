#!/usr/bin/env python3

import os
import re

import argparse

global filepath

# Modified from SE to keep newlines
# http://stackoverflow.com/a/18381470/432509

c_pattern = r"(\".*?\"|\'.*?\')|(/\*.*?\*/|//[^\r\n]*$)"
c_regex = re.compile(c_pattern, re.MULTILINE | re.DOTALL)

def remove_comments(string):
    # first group captures quoted strings (double or single)
    # second group captures comments (//single-line or /* multi-line */)
    def _replacer(match):
        # if the 2nd group (capturing comments) is not None,
        # it means we have captured a non-quoted (real) comment string.
        text =  match.group(2)
        if text is not None:
            # so we will return empty to remove the comment
            return "\n" * text.count("\n")
        else: # otherwise, we will return the 1st group
            return match.group(1) # captured quoted-string
    return c_regex.sub(_replacer, string)

fn_patterns = (
    r"fdrawbox",
    r"fdrawbox_filled",
    r"fdrawcheckerboard",
    r"fdrawline",
    r"sdrawline",
    r"sdrawbox",
    r"UI_ThemeColor",
    r"glAlphaFunc",
    r"glBegin\(",
    r"glCallList",
    r"glCallLists",
    r"glColor[^M]",
    r"glClipPlane",
    r"glDeleteLists",
    r"glDisableClientState",
    r"glDrawPixels",
    r"glEnableClientState",
    r"glEnd\(",
    r"glEndList",
    r"glFeedbackBuffer",
    r"glGenLists",
    r"glInitNames",
    r"glIsList",
    r"glLight[if]",
    r"glLineStipple",
    r"glListBase",
    r"glLoadName",
    r"glMaterial[if]",
    r"glNewList",
    r"glNormal",
    r"glPassThrough",
    r"glPixelZoom",
    r"glPolygonStipple",
    r"glPopAttrib",
    r"glPopClientAttrib",
    r"glPopName",
    r"glPushAttrib",
    r"glPushClientAttrib",
    r"glPushName",
    r"glRasterPos",
    r"glRect[if]",
    r"glRenderMode",
    r"glSelectBuffer",
    r"glShadeModel",
    r"glTexCoord",
    r"glTexGen",
    r"glVertex[^A]",
    r"glVertexPointer",
    r"glWindowPos",
    r"GL_ACCUM_.*_BITS",
    r"GL_ALPHA_TEST",
    r"GL_COLOR_MATERIAL",
    r"GL_DEPTH_TEXTURE_MODE",
    r"GL_LIGHTING",
    r"GL_LINE_STIPPLE",
    r"GL_LUMINANCE",
    r"GL_POINT_SPRITE[^_]",
    r"GL_TEXTURE_ENV_",
    r"GL_TEXTURE_GEN_",
)

fn_regex = re.compile(".*(" + "|".join(fn_patterns) + ").*", re.MULTILINE | re.DOTALL)

def quick_check_source(filepath, code, args):
    # early exit if we have nothing to do!
    if fn_regex.match(code) is None:
        return

    code = remove_comments(code)
    # to rewrite the file
    # return code
    if args.count:
        count = 0
        for l in code.splitlines():
            m = fn_regex.match(l)
            if m is not None:
                count += 1
        if count != 0:
            print("%-50s [%3d]" % (filepath, count))
    else:
        for i, l in enumerate(code.splitlines()):
            m = fn_regex.match(l)
            if m is not None:
                print("%s:%d:%s" % (filepath, i + 1, l))


def scan_source_filepath(filepath, args):
    with open(filepath, 'r', encoding="utf-8", errors="surrogateescape") as f:
        code = f.read()
        code = quick_check_source(filepath, code, args)
    # with open(filepath, 'w', encoding="utf-8") as f:
    #     f.write(code)


def is_ignore(filepath):
    f = os.path.basename(filepath)
    if f in {"bgl.c"}:
        return True
    return False


def scan_source_recursive(dirpath, args):
    import os
    from os.path import join, splitext

    def source_list(path, filename_check=None):
        for dirpath, dirnames, filenames in os.walk(path):

            # skip '.svn'
            if (dirpath[2:] if dirpath.startswith("." + os.sep) else dirpath).startswith("."):
                continue

            for filename in filenames:
                filepath = join(dirpath, filename)
                if filename_check is None or filename_check(filepath):
                    yield filepath

    def is_source(filename):
        ext = splitext(filename)[1]
        return (ext in {".c", ".inl", ".cpp", ".cxx", ".cc", ".hpp", ".hxx", ".h", ".hh"})

    for filepath in sorted(source_list(dirpath, is_source)):
        if is_ignore(filepath):
            continue

        scan_source_filepath(filepath, args)


def create_parser():
    parser = argparse.ArgumentParser(
        description=(
            "Check C/C++ code for conformance with blenders style guide:\n"
            "http://wiki.blender.org/index.php/Dev:Doc/CodeStyle)")
    )
    parser.add_argument(
        "paths",
        nargs='*',
        help="list of files or directories to check",
    )
    parser.add_argument(
        "-c",
        "--count",
        action="store_true",
        help="Only count per-file use",
    )
    return parser


def main(argv=None):
    import sys
    import os

    if argv is None:
        argv = sys.argv[1:]

    parser = create_parser()
    args = parser.parse_args(argv)
    del argv
    print(args)

    for filepath in (args.paths or (".",)):
        if os.path.isdir(filepath):
            # recursive search
            print("Query directory recursive:", filepath)
            scan_source_recursive(filepath, args)
        else:
            # single file
            print("Query file:", filepath)
            scan_source_filepath(filepath, args)


if __name__ == "__main__":
    main()
